// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: manifest.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_manifest_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_manifest_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "schema.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_manifest_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_manifest_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_manifest_2eproto;
namespace manifest_proto {
class Manifest;
struct ManifestDefaultTypeInternal;
extern ManifestDefaultTypeInternal _Manifest_default_instance_;
class SpaceOptions;
struct SpaceOptionsDefaultTypeInternal;
extern SpaceOptionsDefaultTypeInternal _SpaceOptions_default_instance_;
}  // namespace manifest_proto
PROTOBUF_NAMESPACE_OPEN
template<> ::manifest_proto::Manifest* Arena::CreateMaybeMessage<::manifest_proto::Manifest>(Arena*);
template<> ::manifest_proto::SpaceOptions* Arena::CreateMaybeMessage<::manifest_proto::SpaceOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace manifest_proto {

// ===================================================================

class SpaceOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:manifest_proto.SpaceOptions) */ {
 public:
  inline SpaceOptions() : SpaceOptions(nullptr) {}
  ~SpaceOptions() override;
  explicit PROTOBUF_CONSTEXPR SpaceOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpaceOptions(const SpaceOptions& from);
  SpaceOptions(SpaceOptions&& from) noexcept
    : SpaceOptions() {
    *this = ::std::move(from);
  }

  inline SpaceOptions& operator=(const SpaceOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpaceOptions& operator=(SpaceOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SpaceOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpaceOptions* internal_default_instance() {
    return reinterpret_cast<const SpaceOptions*>(
               &_SpaceOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SpaceOptions& a, SpaceOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(SpaceOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpaceOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpaceOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpaceOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SpaceOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const SpaceOptions& from) {
    SpaceOptions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SpaceOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "manifest_proto.SpaceOptions";
  }
  protected:
  explicit SpaceOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUriFieldNumber = 1,
  };
  // string uri = 1;
  void clear_uri();
  const std::string& uri() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_uri(ArgT0&& arg0, ArgT... args);
  std::string* mutable_uri();
  PROTOBUF_NODISCARD std::string* release_uri();
  void set_allocated_uri(std::string* uri);
  private:
  const std::string& _internal_uri() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_uri(const std::string& value);
  std::string* _internal_mutable_uri();
  public:

  // @@protoc_insertion_point(class_scope:manifest_proto.SpaceOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uri_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_manifest_2eproto;
};
// -------------------------------------------------------------------

class Manifest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:manifest_proto.Manifest) */ {
 public:
  inline Manifest() : Manifest(nullptr) {}
  ~Manifest() override;
  explicit PROTOBUF_CONSTEXPR Manifest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Manifest(const Manifest& from);
  Manifest(Manifest&& from) noexcept
    : Manifest() {
    *this = ::std::move(from);
  }

  inline Manifest& operator=(const Manifest& from) {
    CopyFrom(from);
    return *this;
  }
  inline Manifest& operator=(Manifest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Manifest& default_instance() {
    return *internal_default_instance();
  }
  static inline const Manifest* internal_default_instance() {
    return reinterpret_cast<const Manifest*>(
               &_Manifest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Manifest& a, Manifest& b) {
    a.Swap(&b);
  }
  inline void Swap(Manifest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Manifest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Manifest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Manifest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Manifest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Manifest& from) {
    Manifest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Manifest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "manifest_proto.Manifest";
  }
  protected:
  explicit Manifest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScalarFilesFieldNumber = 3,
    kVectorFilesFieldNumber = 4,
    kDeleteFilesFieldNumber = 5,
    kOptionsFieldNumber = 1,
    kSchemaFieldNumber = 2,
  };
  // repeated string scalar_files = 3;
  int scalar_files_size() const;
  private:
  int _internal_scalar_files_size() const;
  public:
  void clear_scalar_files();
  const std::string& scalar_files(int index) const;
  std::string* mutable_scalar_files(int index);
  void set_scalar_files(int index, const std::string& value);
  void set_scalar_files(int index, std::string&& value);
  void set_scalar_files(int index, const char* value);
  void set_scalar_files(int index, const char* value, size_t size);
  std::string* add_scalar_files();
  void add_scalar_files(const std::string& value);
  void add_scalar_files(std::string&& value);
  void add_scalar_files(const char* value);
  void add_scalar_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& scalar_files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_scalar_files();
  private:
  const std::string& _internal_scalar_files(int index) const;
  std::string* _internal_add_scalar_files();
  public:

  // repeated string vector_files = 4;
  int vector_files_size() const;
  private:
  int _internal_vector_files_size() const;
  public:
  void clear_vector_files();
  const std::string& vector_files(int index) const;
  std::string* mutable_vector_files(int index);
  void set_vector_files(int index, const std::string& value);
  void set_vector_files(int index, std::string&& value);
  void set_vector_files(int index, const char* value);
  void set_vector_files(int index, const char* value, size_t size);
  std::string* add_vector_files();
  void add_vector_files(const std::string& value);
  void add_vector_files(std::string&& value);
  void add_vector_files(const char* value);
  void add_vector_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& vector_files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_vector_files();
  private:
  const std::string& _internal_vector_files(int index) const;
  std::string* _internal_add_vector_files();
  public:

  // repeated string delete_files = 5;
  int delete_files_size() const;
  private:
  int _internal_delete_files_size() const;
  public:
  void clear_delete_files();
  const std::string& delete_files(int index) const;
  std::string* mutable_delete_files(int index);
  void set_delete_files(int index, const std::string& value);
  void set_delete_files(int index, std::string&& value);
  void set_delete_files(int index, const char* value);
  void set_delete_files(int index, const char* value, size_t size);
  std::string* add_delete_files();
  void add_delete_files(const std::string& value);
  void add_delete_files(std::string&& value);
  void add_delete_files(const char* value);
  void add_delete_files(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& delete_files() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_delete_files();
  private:
  const std::string& _internal_delete_files(int index) const;
  std::string* _internal_add_delete_files();
  public:

  // .manifest_proto.SpaceOptions options = 1;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::manifest_proto::SpaceOptions& options() const;
  PROTOBUF_NODISCARD ::manifest_proto::SpaceOptions* release_options();
  ::manifest_proto::SpaceOptions* mutable_options();
  void set_allocated_options(::manifest_proto::SpaceOptions* options);
  private:
  const ::manifest_proto::SpaceOptions& _internal_options() const;
  ::manifest_proto::SpaceOptions* _internal_mutable_options();
  public:
  void unsafe_arena_set_allocated_options(
      ::manifest_proto::SpaceOptions* options);
  ::manifest_proto::SpaceOptions* unsafe_arena_release_options();

  // .schema_proto.Schema schema = 2;
  bool has_schema() const;
  private:
  bool _internal_has_schema() const;
  public:
  void clear_schema();
  const ::schema_proto::Schema& schema() const;
  PROTOBUF_NODISCARD ::schema_proto::Schema* release_schema();
  ::schema_proto::Schema* mutable_schema();
  void set_allocated_schema(::schema_proto::Schema* schema);
  private:
  const ::schema_proto::Schema& _internal_schema() const;
  ::schema_proto::Schema* _internal_mutable_schema();
  public:
  void unsafe_arena_set_allocated_schema(
      ::schema_proto::Schema* schema);
  ::schema_proto::Schema* unsafe_arena_release_schema();

  // @@protoc_insertion_point(class_scope:manifest_proto.Manifest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> scalar_files_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> vector_files_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> delete_files_;
    ::manifest_proto::SpaceOptions* options_;
    ::schema_proto::Schema* schema_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_manifest_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SpaceOptions

// string uri = 1;
inline void SpaceOptions::clear_uri() {
  _impl_.uri_.ClearToEmpty();
}
inline const std::string& SpaceOptions::uri() const {
  // @@protoc_insertion_point(field_get:manifest_proto.SpaceOptions.uri)
  return _internal_uri();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SpaceOptions::set_uri(ArgT0&& arg0, ArgT... args) {
 
 _impl_.uri_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:manifest_proto.SpaceOptions.uri)
}
inline std::string* SpaceOptions::mutable_uri() {
  std::string* _s = _internal_mutable_uri();
  // @@protoc_insertion_point(field_mutable:manifest_proto.SpaceOptions.uri)
  return _s;
}
inline const std::string& SpaceOptions::_internal_uri() const {
  return _impl_.uri_.Get();
}
inline void SpaceOptions::_internal_set_uri(const std::string& value) {
  
  _impl_.uri_.Set(value, GetArenaForAllocation());
}
inline std::string* SpaceOptions::_internal_mutable_uri() {
  
  return _impl_.uri_.Mutable(GetArenaForAllocation());
}
inline std::string* SpaceOptions::release_uri() {
  // @@protoc_insertion_point(field_release:manifest_proto.SpaceOptions.uri)
  return _impl_.uri_.Release();
}
inline void SpaceOptions::set_allocated_uri(std::string* uri) {
  if (uri != nullptr) {
    
  } else {
    
  }
  _impl_.uri_.SetAllocated(uri, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.uri_.IsDefault()) {
    _impl_.uri_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:manifest_proto.SpaceOptions.uri)
}

// -------------------------------------------------------------------

// Manifest

// .manifest_proto.SpaceOptions options = 1;
inline bool Manifest::_internal_has_options() const {
  return this != internal_default_instance() && _impl_.options_ != nullptr;
}
inline bool Manifest::has_options() const {
  return _internal_has_options();
}
inline void Manifest::clear_options() {
  if (GetArenaForAllocation() == nullptr && _impl_.options_ != nullptr) {
    delete _impl_.options_;
  }
  _impl_.options_ = nullptr;
}
inline const ::manifest_proto::SpaceOptions& Manifest::_internal_options() const {
  const ::manifest_proto::SpaceOptions* p = _impl_.options_;
  return p != nullptr ? *p : reinterpret_cast<const ::manifest_proto::SpaceOptions&>(
      ::manifest_proto::_SpaceOptions_default_instance_);
}
inline const ::manifest_proto::SpaceOptions& Manifest::options() const {
  // @@protoc_insertion_point(field_get:manifest_proto.Manifest.options)
  return _internal_options();
}
inline void Manifest::unsafe_arena_set_allocated_options(
    ::manifest_proto::SpaceOptions* options) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.options_);
  }
  _impl_.options_ = options;
  if (options) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:manifest_proto.Manifest.options)
}
inline ::manifest_proto::SpaceOptions* Manifest::release_options() {
  
  ::manifest_proto::SpaceOptions* temp = _impl_.options_;
  _impl_.options_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::manifest_proto::SpaceOptions* Manifest::unsafe_arena_release_options() {
  // @@protoc_insertion_point(field_release:manifest_proto.Manifest.options)
  
  ::manifest_proto::SpaceOptions* temp = _impl_.options_;
  _impl_.options_ = nullptr;
  return temp;
}
inline ::manifest_proto::SpaceOptions* Manifest::_internal_mutable_options() {
  
  if (_impl_.options_ == nullptr) {
    auto* p = CreateMaybeMessage<::manifest_proto::SpaceOptions>(GetArenaForAllocation());
    _impl_.options_ = p;
  }
  return _impl_.options_;
}
inline ::manifest_proto::SpaceOptions* Manifest::mutable_options() {
  ::manifest_proto::SpaceOptions* _msg = _internal_mutable_options();
  // @@protoc_insertion_point(field_mutable:manifest_proto.Manifest.options)
  return _msg;
}
inline void Manifest::set_allocated_options(::manifest_proto::SpaceOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(options);
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.options_ = options;
  // @@protoc_insertion_point(field_set_allocated:manifest_proto.Manifest.options)
}

// .schema_proto.Schema schema = 2;
inline bool Manifest::_internal_has_schema() const {
  return this != internal_default_instance() && _impl_.schema_ != nullptr;
}
inline bool Manifest::has_schema() const {
  return _internal_has_schema();
}
inline const ::schema_proto::Schema& Manifest::_internal_schema() const {
  const ::schema_proto::Schema* p = _impl_.schema_;
  return p != nullptr ? *p : reinterpret_cast<const ::schema_proto::Schema&>(
      ::schema_proto::_Schema_default_instance_);
}
inline const ::schema_proto::Schema& Manifest::schema() const {
  // @@protoc_insertion_point(field_get:manifest_proto.Manifest.schema)
  return _internal_schema();
}
inline void Manifest::unsafe_arena_set_allocated_schema(
    ::schema_proto::Schema* schema) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schema_);
  }
  _impl_.schema_ = schema;
  if (schema) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:manifest_proto.Manifest.schema)
}
inline ::schema_proto::Schema* Manifest::release_schema() {
  
  ::schema_proto::Schema* temp = _impl_.schema_;
  _impl_.schema_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::schema_proto::Schema* Manifest::unsafe_arena_release_schema() {
  // @@protoc_insertion_point(field_release:manifest_proto.Manifest.schema)
  
  ::schema_proto::Schema* temp = _impl_.schema_;
  _impl_.schema_ = nullptr;
  return temp;
}
inline ::schema_proto::Schema* Manifest::_internal_mutable_schema() {
  
  if (_impl_.schema_ == nullptr) {
    auto* p = CreateMaybeMessage<::schema_proto::Schema>(GetArenaForAllocation());
    _impl_.schema_ = p;
  }
  return _impl_.schema_;
}
inline ::schema_proto::Schema* Manifest::mutable_schema() {
  ::schema_proto::Schema* _msg = _internal_mutable_schema();
  // @@protoc_insertion_point(field_mutable:manifest_proto.Manifest.schema)
  return _msg;
}
inline void Manifest::set_allocated_schema(::schema_proto::Schema* schema) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.schema_);
  }
  if (schema) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(schema));
    if (message_arena != submessage_arena) {
      schema = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.schema_ = schema;
  // @@protoc_insertion_point(field_set_allocated:manifest_proto.Manifest.schema)
}

// repeated string scalar_files = 3;
inline int Manifest::_internal_scalar_files_size() const {
  return _impl_.scalar_files_.size();
}
inline int Manifest::scalar_files_size() const {
  return _internal_scalar_files_size();
}
inline void Manifest::clear_scalar_files() {
  _impl_.scalar_files_.Clear();
}
inline std::string* Manifest::add_scalar_files() {
  std::string* _s = _internal_add_scalar_files();
  // @@protoc_insertion_point(field_add_mutable:manifest_proto.Manifest.scalar_files)
  return _s;
}
inline const std::string& Manifest::_internal_scalar_files(int index) const {
  return _impl_.scalar_files_.Get(index);
}
inline const std::string& Manifest::scalar_files(int index) const {
  // @@protoc_insertion_point(field_get:manifest_proto.Manifest.scalar_files)
  return _internal_scalar_files(index);
}
inline std::string* Manifest::mutable_scalar_files(int index) {
  // @@protoc_insertion_point(field_mutable:manifest_proto.Manifest.scalar_files)
  return _impl_.scalar_files_.Mutable(index);
}
inline void Manifest::set_scalar_files(int index, const std::string& value) {
  _impl_.scalar_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:manifest_proto.Manifest.scalar_files)
}
inline void Manifest::set_scalar_files(int index, std::string&& value) {
  _impl_.scalar_files_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:manifest_proto.Manifest.scalar_files)
}
inline void Manifest::set_scalar_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.scalar_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:manifest_proto.Manifest.scalar_files)
}
inline void Manifest::set_scalar_files(int index, const char* value, size_t size) {
  _impl_.scalar_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:manifest_proto.Manifest.scalar_files)
}
inline std::string* Manifest::_internal_add_scalar_files() {
  return _impl_.scalar_files_.Add();
}
inline void Manifest::add_scalar_files(const std::string& value) {
  _impl_.scalar_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:manifest_proto.Manifest.scalar_files)
}
inline void Manifest::add_scalar_files(std::string&& value) {
  _impl_.scalar_files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:manifest_proto.Manifest.scalar_files)
}
inline void Manifest::add_scalar_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.scalar_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:manifest_proto.Manifest.scalar_files)
}
inline void Manifest::add_scalar_files(const char* value, size_t size) {
  _impl_.scalar_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:manifest_proto.Manifest.scalar_files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Manifest::scalar_files() const {
  // @@protoc_insertion_point(field_list:manifest_proto.Manifest.scalar_files)
  return _impl_.scalar_files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Manifest::mutable_scalar_files() {
  // @@protoc_insertion_point(field_mutable_list:manifest_proto.Manifest.scalar_files)
  return &_impl_.scalar_files_;
}

// repeated string vector_files = 4;
inline int Manifest::_internal_vector_files_size() const {
  return _impl_.vector_files_.size();
}
inline int Manifest::vector_files_size() const {
  return _internal_vector_files_size();
}
inline void Manifest::clear_vector_files() {
  _impl_.vector_files_.Clear();
}
inline std::string* Manifest::add_vector_files() {
  std::string* _s = _internal_add_vector_files();
  // @@protoc_insertion_point(field_add_mutable:manifest_proto.Manifest.vector_files)
  return _s;
}
inline const std::string& Manifest::_internal_vector_files(int index) const {
  return _impl_.vector_files_.Get(index);
}
inline const std::string& Manifest::vector_files(int index) const {
  // @@protoc_insertion_point(field_get:manifest_proto.Manifest.vector_files)
  return _internal_vector_files(index);
}
inline std::string* Manifest::mutable_vector_files(int index) {
  // @@protoc_insertion_point(field_mutable:manifest_proto.Manifest.vector_files)
  return _impl_.vector_files_.Mutable(index);
}
inline void Manifest::set_vector_files(int index, const std::string& value) {
  _impl_.vector_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:manifest_proto.Manifest.vector_files)
}
inline void Manifest::set_vector_files(int index, std::string&& value) {
  _impl_.vector_files_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:manifest_proto.Manifest.vector_files)
}
inline void Manifest::set_vector_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.vector_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:manifest_proto.Manifest.vector_files)
}
inline void Manifest::set_vector_files(int index, const char* value, size_t size) {
  _impl_.vector_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:manifest_proto.Manifest.vector_files)
}
inline std::string* Manifest::_internal_add_vector_files() {
  return _impl_.vector_files_.Add();
}
inline void Manifest::add_vector_files(const std::string& value) {
  _impl_.vector_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:manifest_proto.Manifest.vector_files)
}
inline void Manifest::add_vector_files(std::string&& value) {
  _impl_.vector_files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:manifest_proto.Manifest.vector_files)
}
inline void Manifest::add_vector_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.vector_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:manifest_proto.Manifest.vector_files)
}
inline void Manifest::add_vector_files(const char* value, size_t size) {
  _impl_.vector_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:manifest_proto.Manifest.vector_files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Manifest::vector_files() const {
  // @@protoc_insertion_point(field_list:manifest_proto.Manifest.vector_files)
  return _impl_.vector_files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Manifest::mutable_vector_files() {
  // @@protoc_insertion_point(field_mutable_list:manifest_proto.Manifest.vector_files)
  return &_impl_.vector_files_;
}

// repeated string delete_files = 5;
inline int Manifest::_internal_delete_files_size() const {
  return _impl_.delete_files_.size();
}
inline int Manifest::delete_files_size() const {
  return _internal_delete_files_size();
}
inline void Manifest::clear_delete_files() {
  _impl_.delete_files_.Clear();
}
inline std::string* Manifest::add_delete_files() {
  std::string* _s = _internal_add_delete_files();
  // @@protoc_insertion_point(field_add_mutable:manifest_proto.Manifest.delete_files)
  return _s;
}
inline const std::string& Manifest::_internal_delete_files(int index) const {
  return _impl_.delete_files_.Get(index);
}
inline const std::string& Manifest::delete_files(int index) const {
  // @@protoc_insertion_point(field_get:manifest_proto.Manifest.delete_files)
  return _internal_delete_files(index);
}
inline std::string* Manifest::mutable_delete_files(int index) {
  // @@protoc_insertion_point(field_mutable:manifest_proto.Manifest.delete_files)
  return _impl_.delete_files_.Mutable(index);
}
inline void Manifest::set_delete_files(int index, const std::string& value) {
  _impl_.delete_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:manifest_proto.Manifest.delete_files)
}
inline void Manifest::set_delete_files(int index, std::string&& value) {
  _impl_.delete_files_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:manifest_proto.Manifest.delete_files)
}
inline void Manifest::set_delete_files(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.delete_files_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:manifest_proto.Manifest.delete_files)
}
inline void Manifest::set_delete_files(int index, const char* value, size_t size) {
  _impl_.delete_files_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:manifest_proto.Manifest.delete_files)
}
inline std::string* Manifest::_internal_add_delete_files() {
  return _impl_.delete_files_.Add();
}
inline void Manifest::add_delete_files(const std::string& value) {
  _impl_.delete_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:manifest_proto.Manifest.delete_files)
}
inline void Manifest::add_delete_files(std::string&& value) {
  _impl_.delete_files_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:manifest_proto.Manifest.delete_files)
}
inline void Manifest::add_delete_files(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.delete_files_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:manifest_proto.Manifest.delete_files)
}
inline void Manifest::add_delete_files(const char* value, size_t size) {
  _impl_.delete_files_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:manifest_proto.Manifest.delete_files)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Manifest::delete_files() const {
  // @@protoc_insertion_point(field_list:manifest_proto.Manifest.delete_files)
  return _impl_.delete_files_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Manifest::mutable_delete_files() {
  // @@protoc_insertion_point(field_mutable_list:manifest_proto.Manifest.delete_files)
  return &_impl_.delete_files_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace manifest_proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_manifest_2eproto
