// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: schema.proto

#include "schema.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_schema_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FixedSizeBinaryType;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_FixedSizeListType;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KeyValueMetadata;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_MapType;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_schema_2eproto ::google::protobuf::internal::SCCInfo<4> scc_info_DataType;
}  // namespace protobuf_schema_2eproto
namespace schema {
class FixedSizeBinaryTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FixedSizeBinaryType>
      _instance;
} _FixedSizeBinaryType_default_instance_;
class FixedSizeListTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<FixedSizeListType>
      _instance;
} _FixedSizeListType_default_instance_;
class DictionaryTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DictionaryType>
      _instance;
} _DictionaryType_default_instance_;
class MapTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapType>
      _instance;
} _MapType_default_instance_;
class DataTypeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataType>
      _instance;
  const ::schema::FixedSizeBinaryType* fixed_size_binary_type_;
  const ::schema::FixedSizeListType* fixed_size_list_type_;
  const ::schema::DictionaryType* dictionary_type_;
  const ::schema::MapType* map_type_;
} _DataType_default_instance_;
class KeyValueMetadataDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeyValueMetadata>
      _instance;
} _KeyValueMetadata_default_instance_;
class FieldDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Field>
      _instance;
} _Field_default_instance_;
class SchemaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Schema>
      _instance;
} _Schema_default_instance_;
}  // namespace schema
namespace protobuf_schema_2eproto {
static void InitDefaultsFixedSizeBinaryType() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schema::_FixedSizeBinaryType_default_instance_;
    new (ptr) ::schema::FixedSizeBinaryType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schema::FixedSizeBinaryType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FixedSizeBinaryType =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFixedSizeBinaryType}, {}};

static void InitDefaultsFixedSizeListType() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schema::_FixedSizeListType_default_instance_;
    new (ptr) ::schema::FixedSizeListType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schema::FixedSizeListType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_FixedSizeListType =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsFixedSizeListType}, {}};

static void InitDefaultsMapType() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schema::_MapType_default_instance_;
    new (ptr) ::schema::MapType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schema::MapType::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_MapType =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsMapType}, {}};

static void InitDefaultsDataType() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schema::_DictionaryType_default_instance_;
    new (ptr) ::schema::DictionaryType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::schema::_DataType_default_instance_;
    new (ptr) ::schema::DataType();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  {
    void* ptr = &::schema::_Field_default_instance_;
    new (ptr) ::schema::Field();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schema::DictionaryType::InitAsDefaultInstance();
  ::schema::DataType::InitAsDefaultInstance();
  ::schema::Field::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<4> scc_info_DataType =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 4, InitDefaultsDataType}, {
      &protobuf_schema_2eproto::scc_info_FixedSizeBinaryType.base,
      &protobuf_schema_2eproto::scc_info_FixedSizeListType.base,
      &protobuf_schema_2eproto::scc_info_MapType.base,
      &protobuf_schema_2eproto::scc_info_KeyValueMetadata.base,}};

static void InitDefaultsKeyValueMetadata() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schema::_KeyValueMetadata_default_instance_;
    new (ptr) ::schema::KeyValueMetadata();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schema::KeyValueMetadata::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KeyValueMetadata =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKeyValueMetadata}, {}};

static void InitDefaultsSchema() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::schema::_Schema_default_instance_;
    new (ptr) ::schema::Schema();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::schema::Schema::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_Schema =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsSchema}, {
      &protobuf_schema_2eproto::scc_info_DataType.base,
      &protobuf_schema_2eproto::scc_info_KeyValueMetadata.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_FixedSizeBinaryType.base);
  ::google::protobuf::internal::InitSCC(&scc_info_FixedSizeListType.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapType.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataType.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KeyValueMetadata.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Schema.base);
}

::google::protobuf::Metadata file_level_metadata[8];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::FixedSizeBinaryType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::FixedSizeBinaryType, byte_width_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::FixedSizeListType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::FixedSizeListType, list_size_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::DictionaryType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::DictionaryType, index_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::DictionaryType, value_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::DictionaryType, ordered_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::MapType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::MapType, keys_sorted_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::DataType, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::DataType, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::schema::DataTypeDefaultTypeInternal, fixed_size_binary_type_),
  offsetof(::schema::DataTypeDefaultTypeInternal, fixed_size_list_type_),
  offsetof(::schema::DataTypeDefaultTypeInternal, dictionary_type_),
  offsetof(::schema::DataTypeDefaultTypeInternal, map_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::DataType, logic_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::DataType, children_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::DataType, type_related_values_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::KeyValueMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::KeyValueMetadata, keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::KeyValueMetadata, values_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::Field, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::Field, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::Field, nullable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::Field, data_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::Field, metadata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::Schema, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::Schema, fields_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::Schema, endianness_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::schema::Schema, metadata_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::schema::FixedSizeBinaryType)},
  { 6, -1, sizeof(::schema::FixedSizeListType)},
  { 12, -1, sizeof(::schema::DictionaryType)},
  { 20, -1, sizeof(::schema::MapType)},
  { 26, -1, sizeof(::schema::DataType)},
  { 38, -1, sizeof(::schema::KeyValueMetadata)},
  { 45, -1, sizeof(::schema::Field)},
  { 54, -1, sizeof(::schema::Schema)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::schema::_FixedSizeBinaryType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::schema::_FixedSizeListType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::schema::_DictionaryType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::schema::_MapType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::schema::_DataType_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::schema::_KeyValueMetadata_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::schema::_Field_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::schema::_Schema_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "schema.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 8);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014schema.proto\022\006schema\")\n\023FixedSizeBinar"
      "yType\022\022\n\nbyte_width\030\001 \001(\005\"&\n\021FixedSizeLi"
      "stType\022\021\n\tlist_size\030\001 \001(\005\"m\n\016DictionaryT"
      "ype\022$\n\nindex_type\030\001 \001(\0132\020.schema.DataTyp"
      "e\022$\n\nvalue_type\030\002 \001(\0132\020.schema.DataType\022"
      "\017\n\007ordered\030\003 \001(\010\"\036\n\007MapType\022\023\n\013keys_sort"
      "ed\030\001 \001(\010\"\273\002\n\010DataType\022=\n\026fixed_size_bina"
      "ry_type\030\001 \001(\0132\033.schema.FixedSizeBinaryTy"
      "peH\000\0229\n\024fixed_size_list_type\030\002 \001(\0132\031.sch"
      "ema.FixedSizeListTypeH\000\0221\n\017dictionary_ty"
      "pe\030\003 \001(\0132\026.schema.DictionaryTypeH\000\022#\n\010ma"
      "p_type\030\004 \001(\0132\017.schema.MapTypeH\000\022%\n\nlogic"
      "_type\030d \001(\0162\021.schema.LogicType\022\037\n\010childr"
      "en\030e \003(\0132\r.schema.FieldB\025\n\023type_related_"
      "values\"0\n\020KeyValueMetadata\022\014\n\004keys\030\001 \003(\t"
      "\022\016\n\006values\030\002 \003(\t\"x\n\005Field\022\014\n\004name\030\001 \001(\t\022"
      "\020\n\010nullable\030\002 \001(\010\022#\n\tdata_type\030\003 \001(\0132\020.s"
      "chema.DataType\022*\n\010metadata\030\004 \001(\0132\030.schem"
      "a.KeyValueMetadata\"{\n\006Schema\022\035\n\006fields\030\001"
      " \003(\0132\r.schema.Field\022&\n\nendianness\030\002 \001(\0162"
      "\022.schema.Endianness\022*\n\010metadata\030\003 \001(\0132\030."
      "schema.KeyValueMetadata*\235\002\n\tLogicType\022\006\n"
      "\002NA\020\000\022\010\n\004BOOL\020\001\022\t\n\005UINT8\020\002\022\010\n\004INT8\020\003\022\n\n\006"
      "UINT16\020\004\022\t\n\005INT16\020\005\022\n\n\006UINT32\020\006\022\t\n\005INT32"
      "\020\007\022\n\n\006UINT64\020\010\022\t\n\005INT64\020\t\022\016\n\nHALF_FLOAT\020"
      "\n\022\t\n\005FLOAT\020\013\022\n\n\006DOUBLE\020\014\022\n\n\006STRING\020\r\022\n\n\006"
      "BINARY\020\016\022\025\n\021FIXED_SIZE_BINARY\020\017\022\010\n\004LIST\020"
      "\031\022\n\n\006STRUCT\020\032\022\016\n\nDICTIONARY\020\035\022\007\n\003MAP\020\036\022\023"
      "\n\017FIXED_SIZE_LIST\020 \022\n\n\006MAX_ID\020\'*!\n\nEndia"
      "nness\022\n\n\006Little\020\000\022\007\n\003Big\020\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1194);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "schema.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_schema_2eproto
namespace schema {
const ::google::protobuf::EnumDescriptor* LogicType_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[0];
}
bool LogicType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 25:
    case 26:
    case 29:
    case 30:
    case 32:
    case 39:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Endianness_descriptor() {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_schema_2eproto::file_level_enum_descriptors[1];
}
bool Endianness_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void FixedSizeBinaryType::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FixedSizeBinaryType::kByteWidthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixedSizeBinaryType::FixedSizeBinaryType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_FixedSizeBinaryType.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.FixedSizeBinaryType)
}
FixedSizeBinaryType::FixedSizeBinaryType(const FixedSizeBinaryType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  byte_width_ = from.byte_width_;
  // @@protoc_insertion_point(copy_constructor:schema.FixedSizeBinaryType)
}

void FixedSizeBinaryType::SharedCtor() {
  byte_width_ = 0;
}

FixedSizeBinaryType::~FixedSizeBinaryType() {
  // @@protoc_insertion_point(destructor:schema.FixedSizeBinaryType)
  SharedDtor();
}

void FixedSizeBinaryType::SharedDtor() {
}

void FixedSizeBinaryType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FixedSizeBinaryType::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FixedSizeBinaryType& FixedSizeBinaryType::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_FixedSizeBinaryType.base);
  return *internal_default_instance();
}


void FixedSizeBinaryType::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.FixedSizeBinaryType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  byte_width_ = 0;
  _internal_metadata_.Clear();
}

bool FixedSizeBinaryType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.FixedSizeBinaryType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 byte_width = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &byte_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.FixedSizeBinaryType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.FixedSizeBinaryType)
  return false;
#undef DO_
}

void FixedSizeBinaryType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.FixedSizeBinaryType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 byte_width = 1;
  if (this->byte_width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->byte_width(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.FixedSizeBinaryType)
}

::google::protobuf::uint8* FixedSizeBinaryType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.FixedSizeBinaryType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 byte_width = 1;
  if (this->byte_width() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->byte_width(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.FixedSizeBinaryType)
  return target;
}

size_t FixedSizeBinaryType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.FixedSizeBinaryType)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 byte_width = 1;
  if (this->byte_width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->byte_width());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixedSizeBinaryType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.FixedSizeBinaryType)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedSizeBinaryType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FixedSizeBinaryType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.FixedSizeBinaryType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.FixedSizeBinaryType)
    MergeFrom(*source);
  }
}

void FixedSizeBinaryType::MergeFrom(const FixedSizeBinaryType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.FixedSizeBinaryType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.byte_width() != 0) {
    set_byte_width(from.byte_width());
  }
}

void FixedSizeBinaryType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.FixedSizeBinaryType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedSizeBinaryType::CopyFrom(const FixedSizeBinaryType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.FixedSizeBinaryType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedSizeBinaryType::IsInitialized() const {
  return true;
}

void FixedSizeBinaryType::Swap(FixedSizeBinaryType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FixedSizeBinaryType::InternalSwap(FixedSizeBinaryType* other) {
  using std::swap;
  swap(byte_width_, other->byte_width_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FixedSizeBinaryType::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void FixedSizeListType::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FixedSizeListType::kListSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixedSizeListType::FixedSizeListType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_FixedSizeListType.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.FixedSizeListType)
}
FixedSizeListType::FixedSizeListType(const FixedSizeListType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  list_size_ = from.list_size_;
  // @@protoc_insertion_point(copy_constructor:schema.FixedSizeListType)
}

void FixedSizeListType::SharedCtor() {
  list_size_ = 0;
}

FixedSizeListType::~FixedSizeListType() {
  // @@protoc_insertion_point(destructor:schema.FixedSizeListType)
  SharedDtor();
}

void FixedSizeListType::SharedDtor() {
}

void FixedSizeListType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* FixedSizeListType::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FixedSizeListType& FixedSizeListType::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_FixedSizeListType.base);
  return *internal_default_instance();
}


void FixedSizeListType::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.FixedSizeListType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  list_size_ = 0;
  _internal_metadata_.Clear();
}

bool FixedSizeListType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.FixedSizeListType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 list_size = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &list_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.FixedSizeListType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.FixedSizeListType)
  return false;
#undef DO_
}

void FixedSizeListType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.FixedSizeListType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 list_size = 1;
  if (this->list_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->list_size(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.FixedSizeListType)
}

::google::protobuf::uint8* FixedSizeListType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.FixedSizeListType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 list_size = 1;
  if (this->list_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->list_size(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.FixedSizeListType)
  return target;
}

size_t FixedSizeListType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.FixedSizeListType)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 list_size = 1;
  if (this->list_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->list_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FixedSizeListType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.FixedSizeListType)
  GOOGLE_DCHECK_NE(&from, this);
  const FixedSizeListType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FixedSizeListType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.FixedSizeListType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.FixedSizeListType)
    MergeFrom(*source);
  }
}

void FixedSizeListType::MergeFrom(const FixedSizeListType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.FixedSizeListType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.list_size() != 0) {
    set_list_size(from.list_size());
  }
}

void FixedSizeListType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.FixedSizeListType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FixedSizeListType::CopyFrom(const FixedSizeListType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.FixedSizeListType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixedSizeListType::IsInitialized() const {
  return true;
}

void FixedSizeListType::Swap(FixedSizeListType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FixedSizeListType::InternalSwap(FixedSizeListType* other) {
  using std::swap;
  swap(list_size_, other->list_size_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata FixedSizeListType::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DictionaryType::InitAsDefaultInstance() {
  ::schema::_DictionaryType_default_instance_._instance.get_mutable()->index_type_ = const_cast< ::schema::DataType*>(
      ::schema::DataType::internal_default_instance());
  ::schema::_DictionaryType_default_instance_._instance.get_mutable()->value_type_ = const_cast< ::schema::DataType*>(
      ::schema::DataType::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DictionaryType::kIndexTypeFieldNumber;
const int DictionaryType::kValueTypeFieldNumber;
const int DictionaryType::kOrderedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DictionaryType::DictionaryType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_DataType.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.DictionaryType)
}
DictionaryType::DictionaryType(const DictionaryType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_index_type()) {
    index_type_ = new ::schema::DataType(*from.index_type_);
  } else {
    index_type_ = NULL;
  }
  if (from.has_value_type()) {
    value_type_ = new ::schema::DataType(*from.value_type_);
  } else {
    value_type_ = NULL;
  }
  ordered_ = from.ordered_;
  // @@protoc_insertion_point(copy_constructor:schema.DictionaryType)
}

void DictionaryType::SharedCtor() {
  ::memset(&index_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ordered_) -
      reinterpret_cast<char*>(&index_type_)) + sizeof(ordered_));
}

DictionaryType::~DictionaryType() {
  // @@protoc_insertion_point(destructor:schema.DictionaryType)
  SharedDtor();
}

void DictionaryType::SharedDtor() {
  if (this != internal_default_instance()) delete index_type_;
  if (this != internal_default_instance()) delete value_type_;
}

void DictionaryType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DictionaryType::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DictionaryType& DictionaryType::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_DataType.base);
  return *internal_default_instance();
}


void DictionaryType::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.DictionaryType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == NULL && index_type_ != NULL) {
    delete index_type_;
  }
  index_type_ = NULL;
  if (GetArenaNoVirtual() == NULL && value_type_ != NULL) {
    delete value_type_;
  }
  value_type_ = NULL;
  ordered_ = false;
  _internal_metadata_.Clear();
}

bool DictionaryType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.DictionaryType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schema.DataType index_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_index_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .schema.DataType value_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_value_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ordered = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ordered_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.DictionaryType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.DictionaryType)
  return false;
#undef DO_
}

void DictionaryType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.DictionaryType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schema.DataType index_type = 1;
  if (this->has_index_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_index_type(), output);
  }

  // .schema.DataType value_type = 2;
  if (this->has_value_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_value_type(), output);
  }

  // bool ordered = 3;
  if (this->ordered() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ordered(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.DictionaryType)
}

::google::protobuf::uint8* DictionaryType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.DictionaryType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schema.DataType index_type = 1;
  if (this->has_index_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_index_type(), deterministic, target);
  }

  // .schema.DataType value_type = 2;
  if (this->has_value_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_value_type(), deterministic, target);
  }

  // bool ordered = 3;
  if (this->ordered() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ordered(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.DictionaryType)
  return target;
}

size_t DictionaryType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.DictionaryType)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // .schema.DataType index_type = 1;
  if (this->has_index_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *index_type_);
  }

  // .schema.DataType value_type = 2;
  if (this->has_value_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *value_type_);
  }

  // bool ordered = 3;
  if (this->ordered() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DictionaryType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.DictionaryType)
  GOOGLE_DCHECK_NE(&from, this);
  const DictionaryType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DictionaryType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.DictionaryType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.DictionaryType)
    MergeFrom(*source);
  }
}

void DictionaryType::MergeFrom(const DictionaryType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.DictionaryType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_index_type()) {
    mutable_index_type()->::schema::DataType::MergeFrom(from.index_type());
  }
  if (from.has_value_type()) {
    mutable_value_type()->::schema::DataType::MergeFrom(from.value_type());
  }
  if (from.ordered() != 0) {
    set_ordered(from.ordered());
  }
}

void DictionaryType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.DictionaryType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DictionaryType::CopyFrom(const DictionaryType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.DictionaryType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DictionaryType::IsInitialized() const {
  return true;
}

void DictionaryType::Swap(DictionaryType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DictionaryType::InternalSwap(DictionaryType* other) {
  using std::swap;
  swap(index_type_, other->index_type_);
  swap(value_type_, other->value_type_);
  swap(ordered_, other->ordered_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DictionaryType::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapType::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapType::kKeysSortedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapType::MapType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_MapType.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.MapType)
}
MapType::MapType(const MapType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  keys_sorted_ = from.keys_sorted_;
  // @@protoc_insertion_point(copy_constructor:schema.MapType)
}

void MapType::SharedCtor() {
  keys_sorted_ = false;
}

MapType::~MapType() {
  // @@protoc_insertion_point(destructor:schema.MapType)
  SharedDtor();
}

void MapType::SharedDtor() {
}

void MapType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapType::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapType& MapType::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_MapType.base);
  return *internal_default_instance();
}


void MapType::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.MapType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_sorted_ = false;
  _internal_metadata_.Clear();
}

bool MapType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.MapType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool keys_sorted = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &keys_sorted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.MapType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.MapType)
  return false;
#undef DO_
}

void MapType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.MapType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool keys_sorted = 1;
  if (this->keys_sorted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->keys_sorted(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.MapType)
}

::google::protobuf::uint8* MapType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.MapType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool keys_sorted = 1;
  if (this->keys_sorted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->keys_sorted(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.MapType)
  return target;
}

size_t MapType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.MapType)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool keys_sorted = 1;
  if (this->keys_sorted() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.MapType)
  GOOGLE_DCHECK_NE(&from, this);
  const MapType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.MapType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.MapType)
    MergeFrom(*source);
  }
}

void MapType::MergeFrom(const MapType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.MapType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.keys_sorted() != 0) {
    set_keys_sorted(from.keys_sorted());
  }
}

void MapType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.MapType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapType::CopyFrom(const MapType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.MapType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapType::IsInitialized() const {
  return true;
}

void MapType::Swap(MapType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapType::InternalSwap(MapType* other) {
  using std::swap;
  swap(keys_sorted_, other->keys_sorted_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapType::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DataType::InitAsDefaultInstance() {
  ::schema::_DataType_default_instance_.fixed_size_binary_type_ = const_cast< ::schema::FixedSizeBinaryType*>(
      ::schema::FixedSizeBinaryType::internal_default_instance());
  ::schema::_DataType_default_instance_.fixed_size_list_type_ = const_cast< ::schema::FixedSizeListType*>(
      ::schema::FixedSizeListType::internal_default_instance());
  ::schema::_DataType_default_instance_.dictionary_type_ = const_cast< ::schema::DictionaryType*>(
      ::schema::DictionaryType::internal_default_instance());
  ::schema::_DataType_default_instance_.map_type_ = const_cast< ::schema::MapType*>(
      ::schema::MapType::internal_default_instance());
}
void DataType::set_allocated_fixed_size_binary_type(::schema::FixedSizeBinaryType* fixed_size_binary_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type_related_values();
  if (fixed_size_binary_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fixed_size_binary_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fixed_size_binary_type, submessage_arena);
    }
    set_has_fixed_size_binary_type();
    type_related_values_.fixed_size_binary_type_ = fixed_size_binary_type;
  }
  // @@protoc_insertion_point(field_set_allocated:schema.DataType.fixed_size_binary_type)
}
void DataType::set_allocated_fixed_size_list_type(::schema::FixedSizeListType* fixed_size_list_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type_related_values();
  if (fixed_size_list_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fixed_size_list_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fixed_size_list_type, submessage_arena);
    }
    set_has_fixed_size_list_type();
    type_related_values_.fixed_size_list_type_ = fixed_size_list_type;
  }
  // @@protoc_insertion_point(field_set_allocated:schema.DataType.fixed_size_list_type)
}
void DataType::set_allocated_dictionary_type(::schema::DictionaryType* dictionary_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type_related_values();
  if (dictionary_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      dictionary_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dictionary_type, submessage_arena);
    }
    set_has_dictionary_type();
    type_related_values_.dictionary_type_ = dictionary_type;
  }
  // @@protoc_insertion_point(field_set_allocated:schema.DataType.dictionary_type)
}
void DataType::set_allocated_map_type(::schema::MapType* map_type) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type_related_values();
  if (map_type) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      map_type = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, map_type, submessage_arena);
    }
    set_has_map_type();
    type_related_values_.map_type_ = map_type;
  }
  // @@protoc_insertion_point(field_set_allocated:schema.DataType.map_type)
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataType::kFixedSizeBinaryTypeFieldNumber;
const int DataType::kFixedSizeListTypeFieldNumber;
const int DataType::kDictionaryTypeFieldNumber;
const int DataType::kMapTypeFieldNumber;
const int DataType::kLogicTypeFieldNumber;
const int DataType::kChildrenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataType::DataType()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_DataType.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.DataType)
}
DataType::DataType(const DataType& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      children_(from.children_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  logic_type_ = from.logic_type_;
  clear_has_type_related_values();
  switch (from.type_related_values_case()) {
    case kFixedSizeBinaryType: {
      mutable_fixed_size_binary_type()->::schema::FixedSizeBinaryType::MergeFrom(from.fixed_size_binary_type());
      break;
    }
    case kFixedSizeListType: {
      mutable_fixed_size_list_type()->::schema::FixedSizeListType::MergeFrom(from.fixed_size_list_type());
      break;
    }
    case kDictionaryType: {
      mutable_dictionary_type()->::schema::DictionaryType::MergeFrom(from.dictionary_type());
      break;
    }
    case kMapType: {
      mutable_map_type()->::schema::MapType::MergeFrom(from.map_type());
      break;
    }
    case TYPE_RELATED_VALUES_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:schema.DataType)
}

void DataType::SharedCtor() {
  logic_type_ = 0;
  clear_has_type_related_values();
}

DataType::~DataType() {
  // @@protoc_insertion_point(destructor:schema.DataType)
  SharedDtor();
}

void DataType::SharedDtor() {
  if (has_type_related_values()) {
    clear_type_related_values();
  }
}

void DataType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DataType::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataType& DataType::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_DataType.base);
  return *internal_default_instance();
}


void DataType::clear_type_related_values() {
// @@protoc_insertion_point(one_of_clear_start:schema.DataType)
  switch (type_related_values_case()) {
    case kFixedSizeBinaryType: {
      delete type_related_values_.fixed_size_binary_type_;
      break;
    }
    case kFixedSizeListType: {
      delete type_related_values_.fixed_size_list_type_;
      break;
    }
    case kDictionaryType: {
      delete type_related_values_.dictionary_type_;
      break;
    }
    case kMapType: {
      delete type_related_values_.map_type_;
      break;
    }
    case TYPE_RELATED_VALUES_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_RELATED_VALUES_NOT_SET;
}


void DataType::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.DataType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  children_.Clear();
  logic_type_ = 0;
  clear_type_related_values();
  _internal_metadata_.Clear();
}

bool DataType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.DataType)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .schema.FixedSizeBinaryType fixed_size_binary_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fixed_size_binary_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .schema.FixedSizeListType fixed_size_list_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_fixed_size_list_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .schema.DictionaryType dictionary_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_dictionary_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .schema.MapType map_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_map_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .schema.LogicType logic_type = 100;
      case 100: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 800 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_logic_type(static_cast< ::schema::LogicType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .schema.Field children = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 810 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_children()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.DataType)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.DataType)
  return false;
#undef DO_
}

void DataType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.DataType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schema.FixedSizeBinaryType fixed_size_binary_type = 1;
  if (has_fixed_size_binary_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_fixed_size_binary_type(), output);
  }

  // .schema.FixedSizeListType fixed_size_list_type = 2;
  if (has_fixed_size_list_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_fixed_size_list_type(), output);
  }

  // .schema.DictionaryType dictionary_type = 3;
  if (has_dictionary_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_dictionary_type(), output);
  }

  // .schema.MapType map_type = 4;
  if (has_map_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_map_type(), output);
  }

  // .schema.LogicType logic_type = 100;
  if (this->logic_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      100, this->logic_type(), output);
  }

  // repeated .schema.Field children = 101;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->children_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      101,
      this->children(static_cast<int>(i)),
      output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.DataType)
}

::google::protobuf::uint8* DataType::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.DataType)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .schema.FixedSizeBinaryType fixed_size_binary_type = 1;
  if (has_fixed_size_binary_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_fixed_size_binary_type(), deterministic, target);
  }

  // .schema.FixedSizeListType fixed_size_list_type = 2;
  if (has_fixed_size_list_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_fixed_size_list_type(), deterministic, target);
  }

  // .schema.DictionaryType dictionary_type = 3;
  if (has_dictionary_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_dictionary_type(), deterministic, target);
  }

  // .schema.MapType map_type = 4;
  if (has_map_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_map_type(), deterministic, target);
  }

  // .schema.LogicType logic_type = 100;
  if (this->logic_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      100, this->logic_type(), target);
  }

  // repeated .schema.Field children = 101;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->children_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        101, this->children(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.DataType)
  return target;
}

size_t DataType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.DataType)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .schema.Field children = 101;
  {
    unsigned int count = static_cast<unsigned int>(this->children_size());
    total_size += 2UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->children(static_cast<int>(i)));
    }
  }

  // .schema.LogicType logic_type = 100;
  if (this->logic_type() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->logic_type());
  }

  switch (type_related_values_case()) {
    // .schema.FixedSizeBinaryType fixed_size_binary_type = 1;
    case kFixedSizeBinaryType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_related_values_.fixed_size_binary_type_);
      break;
    }
    // .schema.FixedSizeListType fixed_size_list_type = 2;
    case kFixedSizeListType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_related_values_.fixed_size_list_type_);
      break;
    }
    // .schema.DictionaryType dictionary_type = 3;
    case kDictionaryType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_related_values_.dictionary_type_);
      break;
    }
    // .schema.MapType map_type = 4;
    case kMapType: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_related_values_.map_type_);
      break;
    }
    case TYPE_RELATED_VALUES_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataType::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.DataType)
  GOOGLE_DCHECK_NE(&from, this);
  const DataType* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataType>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.DataType)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.DataType)
    MergeFrom(*source);
  }
}

void DataType::MergeFrom(const DataType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.DataType)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  children_.MergeFrom(from.children_);
  if (from.logic_type() != 0) {
    set_logic_type(from.logic_type());
  }
  switch (from.type_related_values_case()) {
    case kFixedSizeBinaryType: {
      mutable_fixed_size_binary_type()->::schema::FixedSizeBinaryType::MergeFrom(from.fixed_size_binary_type());
      break;
    }
    case kFixedSizeListType: {
      mutable_fixed_size_list_type()->::schema::FixedSizeListType::MergeFrom(from.fixed_size_list_type());
      break;
    }
    case kDictionaryType: {
      mutable_dictionary_type()->::schema::DictionaryType::MergeFrom(from.dictionary_type());
      break;
    }
    case kMapType: {
      mutable_map_type()->::schema::MapType::MergeFrom(from.map_type());
      break;
    }
    case TYPE_RELATED_VALUES_NOT_SET: {
      break;
    }
  }
}

void DataType::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.DataType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataType::CopyFrom(const DataType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.DataType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataType::IsInitialized() const {
  return true;
}

void DataType::Swap(DataType* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataType::InternalSwap(DataType* other) {
  using std::swap;
  CastToBase(&children_)->InternalSwap(CastToBase(&other->children_));
  swap(logic_type_, other->logic_type_);
  swap(type_related_values_, other->type_related_values_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DataType::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KeyValueMetadata::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyValueMetadata::kKeysFieldNumber;
const int KeyValueMetadata::kValuesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyValueMetadata::KeyValueMetadata()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_KeyValueMetadata.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.KeyValueMetadata)
}
KeyValueMetadata::KeyValueMetadata(const KeyValueMetadata& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      keys_(from.keys_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:schema.KeyValueMetadata)
}

void KeyValueMetadata::SharedCtor() {
}

KeyValueMetadata::~KeyValueMetadata() {
  // @@protoc_insertion_point(destructor:schema.KeyValueMetadata)
  SharedDtor();
}

void KeyValueMetadata::SharedDtor() {
}

void KeyValueMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KeyValueMetadata::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeyValueMetadata& KeyValueMetadata::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_KeyValueMetadata.base);
  return *internal_default_instance();
}


void KeyValueMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.KeyValueMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  keys_.Clear();
  values_.Clear();
  _internal_metadata_.Clear();
}

bool KeyValueMetadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.KeyValueMetadata)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string keys = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_keys()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->keys(this->keys_size() - 1).data(),
            static_cast<int>(this->keys(this->keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "schema.KeyValueMetadata.keys"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string values = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_values()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->values(this->values_size() - 1).data(),
            static_cast<int>(this->values(this->values_size() - 1).length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "schema.KeyValueMetadata.values"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.KeyValueMetadata)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.KeyValueMetadata)
  return false;
#undef DO_
}

void KeyValueMetadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.KeyValueMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schema.KeyValueMetadata.keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->keys(i), output);
  }

  // repeated string values = 2;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->values(i).data(), static_cast<int>(this->values(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schema.KeyValueMetadata.values");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->values(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.KeyValueMetadata)
}

::google::protobuf::uint8* KeyValueMetadata::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.KeyValueMetadata)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string keys = 1;
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->keys(i).data(), static_cast<int>(this->keys(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schema.KeyValueMetadata.keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->keys(i), target);
  }

  // repeated string values = 2;
  for (int i = 0, n = this->values_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->values(i).data(), static_cast<int>(this->values(i).length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schema.KeyValueMetadata.values");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->values(i), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.KeyValueMetadata)
  return target;
}

size_t KeyValueMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.KeyValueMetadata)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated string keys = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->keys_size());
  for (int i = 0, n = this->keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->keys(i));
  }

  // repeated string values = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->values_size());
  for (int i = 0, n = this->values_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->values(i));
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeyValueMetadata::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.KeyValueMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const KeyValueMetadata* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeyValueMetadata>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.KeyValueMetadata)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.KeyValueMetadata)
    MergeFrom(*source);
  }
}

void KeyValueMetadata::MergeFrom(const KeyValueMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.KeyValueMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  keys_.MergeFrom(from.keys_);
  values_.MergeFrom(from.values_);
}

void KeyValueMetadata::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.KeyValueMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValueMetadata::CopyFrom(const KeyValueMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.KeyValueMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValueMetadata::IsInitialized() const {
  return true;
}

void KeyValueMetadata::Swap(KeyValueMetadata* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyValueMetadata::InternalSwap(KeyValueMetadata* other) {
  using std::swap;
  keys_.InternalSwap(CastToBase(&other->keys_));
  values_.InternalSwap(CastToBase(&other->values_));
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KeyValueMetadata::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Field::InitAsDefaultInstance() {
  ::schema::_Field_default_instance_._instance.get_mutable()->data_type_ = const_cast< ::schema::DataType*>(
      ::schema::DataType::internal_default_instance());
  ::schema::_Field_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::schema::KeyValueMetadata*>(
      ::schema::KeyValueMetadata::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Field::kNameFieldNumber;
const int Field::kNullableFieldNumber;
const int Field::kDataTypeFieldNumber;
const int Field::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Field::Field()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_DataType.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.Field)
}
Field::Field(const Field& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_data_type()) {
    data_type_ = new ::schema::DataType(*from.data_type_);
  } else {
    data_type_ = NULL;
  }
  if (from.has_metadata()) {
    metadata_ = new ::schema::KeyValueMetadata(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  nullable_ = from.nullable_;
  // @@protoc_insertion_point(copy_constructor:schema.Field)
}

void Field::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&data_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nullable_) -
      reinterpret_cast<char*>(&data_type_)) + sizeof(nullable_));
}

Field::~Field() {
  // @@protoc_insertion_point(destructor:schema.Field)
  SharedDtor();
}

void Field::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_type_;
  if (this != internal_default_instance()) delete metadata_;
}

void Field::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Field::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Field& Field::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_DataType.base);
  return *internal_default_instance();
}


void Field::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.Field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && data_type_ != NULL) {
    delete data_type_;
  }
  data_type_ = NULL;
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
  nullable_ = false;
  _internal_metadata_.Clear();
}

bool Field::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.Field)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "schema.Field.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool nullable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &nullable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .schema.DataType data_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_data_type()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .schema.KeyValueMetadata metadata = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.Field)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.Field)
  return false;
#undef DO_
}

void Field::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.Field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schema.Field.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // bool nullable = 2;
  if (this->nullable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->nullable(), output);
  }

  // .schema.DataType data_type = 3;
  if (this->has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_data_type(), output);
  }

  // .schema.KeyValueMetadata metadata = 4;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_metadata(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.Field)
}

::google::protobuf::uint8* Field::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.Field)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "schema.Field.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // bool nullable = 2;
  if (this->nullable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->nullable(), target);
  }

  // .schema.DataType data_type = 3;
  if (this->has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_data_type(), deterministic, target);
  }

  // .schema.KeyValueMetadata metadata = 4;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_metadata(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.Field)
  return target;
}

size_t Field::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.Field)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .schema.DataType data_type = 3;
  if (this->has_data_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *data_type_);
  }

  // .schema.KeyValueMetadata metadata = 4;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // bool nullable = 2;
  if (this->nullable() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Field::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.Field)
  GOOGLE_DCHECK_NE(&from, this);
  const Field* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Field>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.Field)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.Field)
    MergeFrom(*source);
  }
}

void Field::MergeFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.Field)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_data_type()) {
    mutable_data_type()->::schema::DataType::MergeFrom(from.data_type());
  }
  if (from.has_metadata()) {
    mutable_metadata()->::schema::KeyValueMetadata::MergeFrom(from.metadata());
  }
  if (from.nullable() != 0) {
    set_nullable(from.nullable());
  }
}

void Field::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Field::CopyFrom(const Field& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.Field)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Field::IsInitialized() const {
  return true;
}

void Field::Swap(Field* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Field::InternalSwap(Field* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(data_type_, other->data_type_);
  swap(metadata_, other->metadata_);
  swap(nullable_, other->nullable_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Field::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Schema::InitAsDefaultInstance() {
  ::schema::_Schema_default_instance_._instance.get_mutable()->metadata_ = const_cast< ::schema::KeyValueMetadata*>(
      ::schema::KeyValueMetadata::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Schema::kFieldsFieldNumber;
const int Schema::kEndiannessFieldNumber;
const int Schema::kMetadataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Schema::Schema()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_schema_2eproto::scc_info_Schema.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:schema.Schema)
}
Schema::Schema(const Schema& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      fields_(from.fields_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_metadata()) {
    metadata_ = new ::schema::KeyValueMetadata(*from.metadata_);
  } else {
    metadata_ = NULL;
  }
  endianness_ = from.endianness_;
  // @@protoc_insertion_point(copy_constructor:schema.Schema)
}

void Schema::SharedCtor() {
  ::memset(&metadata_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&endianness_) -
      reinterpret_cast<char*>(&metadata_)) + sizeof(endianness_));
}

Schema::~Schema() {
  // @@protoc_insertion_point(destructor:schema.Schema)
  SharedDtor();
}

void Schema::SharedDtor() {
  if (this != internal_default_instance()) delete metadata_;
}

void Schema::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Schema::descriptor() {
  ::protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Schema& Schema::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_schema_2eproto::scc_info_Schema.base);
  return *internal_default_instance();
}


void Schema::Clear() {
// @@protoc_insertion_point(message_clear_start:schema.Schema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fields_.Clear();
  if (GetArenaNoVirtual() == NULL && metadata_ != NULL) {
    delete metadata_;
  }
  metadata_ = NULL;
  endianness_ = 0;
  _internal_metadata_.Clear();
}

bool Schema::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:schema.Schema)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .schema.Field fields = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_fields()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .schema.Endianness endianness = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_endianness(static_cast< ::schema::Endianness >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .schema.KeyValueMetadata metadata = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_metadata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:schema.Schema)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:schema.Schema)
  return false;
#undef DO_
}

void Schema::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:schema.Schema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .schema.Field fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fields_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->fields(static_cast<int>(i)),
      output);
  }

  // .schema.Endianness endianness = 2;
  if (this->endianness() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->endianness(), output);
  }

  // .schema.KeyValueMetadata metadata = 3;
  if (this->has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_metadata(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:schema.Schema)
}

::google::protobuf::uint8* Schema::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:schema.Schema)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .schema.Field fields = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->fields_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->fields(static_cast<int>(i)), deterministic, target);
  }

  // .schema.Endianness endianness = 2;
  if (this->endianness() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->endianness(), target);
  }

  // .schema.KeyValueMetadata metadata = 3;
  if (this->has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_metadata(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:schema.Schema)
  return target;
}

size_t Schema::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:schema.Schema)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .schema.Field fields = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->fields_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->fields(static_cast<int>(i)));
    }
  }

  // .schema.KeyValueMetadata metadata = 3;
  if (this->has_metadata()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  // .schema.Endianness endianness = 2;
  if (this->endianness() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->endianness());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Schema::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:schema.Schema)
  GOOGLE_DCHECK_NE(&from, this);
  const Schema* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Schema>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:schema.Schema)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:schema.Schema)
    MergeFrom(*source);
  }
}

void Schema::MergeFrom(const Schema& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:schema.Schema)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fields_.MergeFrom(from.fields_);
  if (from.has_metadata()) {
    mutable_metadata()->::schema::KeyValueMetadata::MergeFrom(from.metadata());
  }
  if (from.endianness() != 0) {
    set_endianness(from.endianness());
  }
}

void Schema::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:schema.Schema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Schema::CopyFrom(const Schema& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:schema.Schema)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Schema::IsInitialized() const {
  return true;
}

void Schema::Swap(Schema* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Schema::InternalSwap(Schema* other) {
  using std::swap;
  CastToBase(&fields_)->InternalSwap(CastToBase(&other->fields_));
  swap(metadata_, other->metadata_);
  swap(endianness_, other->endianness_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Schema::GetMetadata() const {
  protobuf_schema_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_schema_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace schema
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::schema::FixedSizeBinaryType* Arena::CreateMaybeMessage< ::schema::FixedSizeBinaryType >(Arena* arena) {
  return Arena::CreateInternal< ::schema::FixedSizeBinaryType >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::schema::FixedSizeListType* Arena::CreateMaybeMessage< ::schema::FixedSizeListType >(Arena* arena) {
  return Arena::CreateInternal< ::schema::FixedSizeListType >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::schema::DictionaryType* Arena::CreateMaybeMessage< ::schema::DictionaryType >(Arena* arena) {
  return Arena::CreateInternal< ::schema::DictionaryType >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::schema::MapType* Arena::CreateMaybeMessage< ::schema::MapType >(Arena* arena) {
  return Arena::CreateInternal< ::schema::MapType >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::schema::DataType* Arena::CreateMaybeMessage< ::schema::DataType >(Arena* arena) {
  return Arena::CreateInternal< ::schema::DataType >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::schema::KeyValueMetadata* Arena::CreateMaybeMessage< ::schema::KeyValueMetadata >(Arena* arena) {
  return Arena::CreateInternal< ::schema::KeyValueMetadata >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::schema::Field* Arena::CreateMaybeMessage< ::schema::Field >(Arena* arena) {
  return Arena::CreateInternal< ::schema::Field >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::schema::Schema* Arena::CreateMaybeMessage< ::schema::Schema >(Arena* arena) {
  return Arena::CreateInternal< ::schema::Schema >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
